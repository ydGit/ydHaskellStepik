{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE PatternSynonyms #-}

module TypeTraversable where

infixr 9 |.|
newtype (|.|) f g a = Cmps { getCmps :: f (g a) }  deriving (Eq,Show)

instance Functor ((|.|) f g) where
  fmap = undefined

instance Applicative ((|.|) f g) where
  pure = undefined
  (<*>) = undefined

instance Foldable ((|.|) f g) where
  foldr = undefined

{-аргументы композиции являются представителями Traversable-}

instance (Traversable f, Traversable g) => Traversable (f |.| g) where
  -- traverse :: (Applicative k, Traversable Tree) => (a -> k b) -> (|.|) f g a -> k ((|.|) f g b)
  -- traverse h (Cmps x) = undefined
  traverse h (Cmps x) = pure Cmps <*> traverse phi x
                        where phi = undefined

{-
-- traverse :: (a -> k b) -> t a -> k (t b)


x :: f (g a)
traverse phi x :: k (f (g b))
if phi :: (g a -> k (g b))
then
traverse phi :: t (g a) -> k (t (g b))

when applied to x :: f (g a) this will yield

k (f (g b))

Now, how can we construct phi :: (g a) -> k (g b)

we have traverse and h and x.

h :: a -> k b

traverse . h :: t a -> k (t b)
-}
