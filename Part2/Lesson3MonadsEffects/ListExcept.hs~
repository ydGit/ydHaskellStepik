module ListExcept where

import Control.Monad.Trans.Except

data ListIndexError = ErrIndexTooLarge Int | ErrNegativeIndex
  deriving (Eq, Show)



infixl 9 !!!
(!!!) :: [a] -> Int -> Except ListIndexError a
xs !!! n
  | n < 0 = except . Left $ ErrNegativeIndex
  | otherwise = let xs' = drop n xs
                in
                  case xs' of
                    [] -> except . Left $ ErrIndexTooLarge n
                    (x:_) -> except . Right $ x


{- Interestingly, the solution using length function takes too much memory
  for some cases (infinite list !!!! -}

{-
GHCi> runExcept $ [1..100] !!! 5
Right 6
GHCi> (!!!!) xs n = runExcept $ xs !!! n
GHCi> [1,2,3] !!!! 0
Right 1
GHCi> [1,2,3] !!!! 42
Left (ErrIndexTooLarge 42)
GHCi> [1,2,3] !!!! (-3)
Left ErrNegativeIndex
-}


data ReadError = EmptyInput | NoParse String
  deriving Show


tryRead :: Read a => String -> Except ReadError a
tryRead [] = except $ Left EmptyInput
tryRead s = let q :: (Read a) => [(a, String)]
                q = read s
            in
              case (reads s) of
                [(v, "")] -> except $ Right v
                otherwise -> except $ Left $ NoParse s


data SumError = SumError Int ReadError
  deriving Show

-- use tryRead to implement summation with exceptions
-- trySum :: [String] -> Except SumError Integer
-- trySum = foldl f (0, 1) where
--   f = undefined

f :: Except ReadError Int -> Except SumError Int
f e = case runExcept e of
        (Left EmptyInput) -> undefined
        (Left (NoParse s)) -> undefined
        (Right v) -> except $ Right v


sum1, sum2, sum3 :: [Except ReadError Int]
sum1 = map tryRead ["10", "20", "30"]
sum2 = map tryRead ["10", "20", ""]
sum3 = map tryRead ["10", "two", "30"]

{-
GHCi> runExcept $ trySum ["10", "20", "30"]
Right 60
GHCi> runExcept $ trySum ["10", "20", ""]
Left (SumError 3 EmptyInput)
GHCi> runExcept $ trySum ["10", "two", "30"]
Left (SumError 2 (NoParse "two"))

-- Hint: use
withExcept :: (e -> e') -> Except e a -> Except e' a 


-}
trySum :: [String] -> Except SumError Integer
trySum = undefined
